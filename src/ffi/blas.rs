#![allow(non_camel_case_types)]

use core::ffi::c_char;
use num_complex::*;

#[cfg(not(feature = "ilp64"))]
pub type blasint = i32;
#[cfg(feature = "ilp64")]
pub type blasint = i64;

pub type c32 = Complex<f32>;
pub type c64 = Complex<f64>;

/* automatically generated by rust-bindgen 0.69.4 */

extern "C" {
    pub fn sgemm_(
        transa: *const c_char,
        transb: *const c_char,
        m: *const blasint,
        n: *const blasint,
        k: *const blasint,
        alpha: *const f32,
        a: *const f32,
        lda: *const blasint,
        b: *const f32,
        ldb: *const blasint,
        beta: *const f32,
        c: *mut f32,
        ldc: *const blasint,
    );
}
extern "C" {
    pub fn dgemm_(
        transa: *const c_char,
        transb: *const c_char,
        m: *const blasint,
        n: *const blasint,
        k: *const blasint,
        alpha: *const f64,
        a: *const f64,
        lda: *const blasint,
        b: *const f64,
        ldb: *const blasint,
        beta: *const f64,
        c: *mut f64,
        ldc: *const blasint,
    );
}
extern "C" {
    pub fn cgemm_(
        transa: *const c_char,
        transb: *const c_char,
        m: *const blasint,
        n: *const blasint,
        k: *const blasint,
        alpha: *const c32,
        a: *const c32,
        lda: *const blasint,
        b: *const c32,
        ldb: *const blasint,
        beta: *const c32,
        c: *mut c32,
        ldc: *const blasint,
    );
}
extern "C" {
    pub fn zgemm_(
        transa: *const c_char,
        transb: *const c_char,
        m: *const blasint,
        n: *const blasint,
        k: *const blasint,
        alpha: *const c64,
        a: *const c64,
        lda: *const blasint,
        b: *const c64,
        ldb: *const blasint,
        beta: *const c64,
        c: *mut c64,
        ldc: *const blasint,
    );
}
